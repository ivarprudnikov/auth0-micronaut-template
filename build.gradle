plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.kapt" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.10"
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

version "1.0"
group "com.ivarprudnikov.auth0"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {

    // Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.31")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.10")

    // Micronaut main deps
    kapt(platform("io.micronaut:micronaut-bom:2.3.1"))
    implementation(platform("io.micronaut:micronaut-bom:2.3.1"))
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")

    // DI
    implementation("io.micronaut:micronaut-inject")
    kapt("io.micronaut:micronaut-inject-java")

    // Security
    implementation("io.micronaut.security:micronaut-security-jwt")
    kapt("io.micronaut.security:micronaut-security-annotations")

    // Bean validation
    implementation("io.micronaut:micronaut-validation")
    kapt("io.micronaut:micronaut-validation")

    // Logs
    implementation("org.apache.logging.log4j:log4j-core:2.14.0")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.14.0")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.14.0")
    runtimeOnly("com.amazonaws:aws-lambda-java-log4j2:1.2.0")

    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

    // AWS proxy integration
    implementation("io.micronaut.aws:micronaut-function-aws-api-proxy") {
        exclude group: "org.slf4j"
    }

    // Testing
    kaptTest(enforcedPlatform("io.micronaut:micronaut-bom:2.2.3"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:2.2.2"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.mockito:mockito-core:2.+")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

test.classpath += configurations.developmentOnly

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
	annotation("io.micronaut.aop.Around")
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = '11'
	    //Will retain parameter names for Java reflection
	    javaParameters = true
	}
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = '11'
	    javaParameters = true
	}
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "com.ivarprudnikov.auth0.*")
        arg("micronaut.processing.group", "com.ivarprudnikov.auth0")
        arg("micronaut.processing.module", "auth0MicronautTemplate")
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}
